| memoria + diccionario r4
| PHREDA 2015
|----------------------------------

| MEM
|-----------------	codesrc
| codigo...
|-----------------
| includes...
|----------------- 	 code
|					<<boot
| programa...		 code>

#:codesrc
#:code
#:code>
#:<<boot

|---- includes
| 'string|'mem
|  0      4
#:indiceinc )( $7ff		| 256 includes
#:indiceinc> 'indiceinc
#:indiceinc< 'indiceinc

|---- diccionario
| str|token|info|mov  	16 bytes por palabra
| 0      4     8   12
| >str		->src
| >>token	->code
| >>>info
| bit  significado
| 1		0 accion 1 dato
| 2		0 local 1 exportado
| 3		1 es usado con direccion
| 4		0 no usas R(A) 1 usa R(A) .. R(A) es cuando R se usa como auxiliar
| 5		0 un ; 1 varios ;
| 6     1 si es recursiva
| 7		1 si tiene anonimas
| 8		1 termina sin ;
| 9 	inline
|
| 12-24		llamadas (12 bits)   $00fff000
| 25-32		nivel	(8 bits)     $ff000000
|
| >>>>mov
| byte	significado
| 1		dD (-128..127)
| 2     dU (-128..127)
| 3/    dR ( -8..7 )
| /4	largo en tokens (12 bits)
|-----------------
|--- info de variables
| valor               0
| direccion           1
| direccion codigo    2
| string              3
| lista valores       4
| lista direcciones   5
| lista dir codigos   6
| lista strings       7
| estructura multiple 8
|--------------------
#:indicepal )( $3ffff	| 16k palabras
#:indicepal> 'indicepal
#:indicepal< 'indicepal

::dic>str	4 << 'indicepal + ;
::dic>tok	4 << 'indicepal + 4+ ;
::dic>inf	4 << 'indicepal + 8 + ;
::dic>mov	4 << 'indicepal + 12 + ;

::dic>len@	dic>mov @ 20 >> $fff and ;
::dic>call@	dic>inf @ 12 >> $fff and ;

::tok>mem	8 >> codesrc + ;		| tok -- adr
::tok>name	8 >> dic>str @ ;

::adr>dic
	'indicepal - 4 >> ;

::?palabra | str -- str dir / str 0
	indicepal> 16 -	|---largo
	( 'indicepal >=? )(
		dup @						| str ind pal
		pick2
		=s 0? ( drop )( drop
			dup 8 + @
			%10 and? ( drop ; )( drop indicepal< >=? ( ; ) )
			)
		16 - ) drop
	0 ;

::include? | str -- adr/0
	'indiceinc ( indiceinc> <? )(
		@+ pick2 =s 1? ( drop nip 4 - ; ) drop
		4+ ) 2drop 0 ;

::word+! | adr tipo -- adr
	indicepal> >r
	over r!+		| str del nombre
	code> r!+		| token de comienzo
	r!+				| info de palabra
	0 r!+			| mem?
	r> 0 over ! 'indicepal> ! ;

|----
::escom | adr -- adr'
	"|WIN|" =pre 1? ( drop 5 + ; ) drop | Compila para WINDOWS
	( c@+ 1? )( 10 =? ( drop 1- ; ) 13 =? ( drop 1- ; ) drop ) drop 1- ;

::escad | adr -- adr'
	( c@+ 1? )( 34 =? ( drop c@+ 34 <>? ( drop 1- ; ) ) drop ) drop 1- ;

::espal | adr -- adr'
	( c@+ 1? )( $ff and 33 <? ( drop 1- ; ) drop ) drop 1- ;

|---- Compila programa
::,, | n --
	code> !+ 'code> ! ;

::nroword | -- nro
	indicepal> 'indicepal - 4 >> 1- ;

|--- dibuja movimiento pilas
:ncar | n car -- car
	( swap 1? )( 1- swap dup emit 1+ ) drop ;

::printmovword | mov --
	97 >r
	dup 16 << 24 >> | usedD
	neg dup r> ncar >r
	"--" print
	over 24 << 24 >> + | deltaD
	r> ncar >r
	12 << 28 >>
	0 <? ( dup " R:--" print neg r> ncar >r )
	0 >? ( dup " R:" print r> ncar >r "--" print )
	drop rdrop ;

::printinfword | inf --
	dup 12 >> $fff and
	0? ( "X" print )		| no usada
	drop
	1 and? (
		$4 nand? ( "cte " print )	| dato constante
	)(
		$10 and? ( ";" print )	| varios ;
		$20 and? ( "R" print )	| recursivo
		$80 and? ( "." print )	| continuo (sin ;)
	)
	drop
	;

:,ncar | n car -- car
	( swap 1? )( 1- swap dup ,c 1+ ) drop ;

::,printmovword | mov --
	97 >r
	dup 16 << 24 >> | usedD
	neg dup r> ,ncar >r
	"--" ,s
	over 24 << 24 >> + | deltaD
	r> ,ncar >r
	12 << 28 >>
	0 <? ( dup " R:--" ,s neg r> ,ncar >r )
	0 >? ( dup " R:" ,s r> ,ncar >r "--" ,s )
	drop rdrop
	0 ,c ;

|--- info de variables
#vtipos
"val"
"dir data"
"dir code"
"string"
"list val"
"list dir data"
"list dir code"
"list strings"
"struct"

::vtype | nro -- str
    $f and
	'vtipos swap ( 1? )( swap >>0 swap 1- ) drop ;

::,printinfovar | inf --
	dup 12 >> $fff and
	0? ( "** No usada " ,s 2drop ; )		| no usada
	drop
|	1 and? (
		$4 nand? ( "Cte " ,s )	| dato constante
|	)
	6 >> vtype ,s ;

::,printinfowor | inf --
	dup 12 >> $fff and
	0? ( "** No usada ***" ,s ,c drop ; )		| no usada
	drop
|	1 nand? (
		$10 and? ( ";" ,s )	| varios ;
		$20 and? ( "Rec" ,s )	| recursivo
		$80 and? ( ".." ,s )	| continuo (sin ;)
|	)
	drop
	0 ,c ;

|----------- DEBUG ---------------
::dumpinc
	verde
	indiceinc> 'indiceinc  - 3 >> "%d " print
	"includes" print cr
	amarillo
	chome!
	'indiceinc ( indiceinc> <? )(
		@+ "%w " print
		@+ "%h " print
		cr allowchome ) drop ;

::dumpdic
	violeta
	"words" print cr
	verde chome!
	'indicepal ( indicepal> <? )(
		@+ "%w " print
		@+ "%h " print
		@+ "%h " print
		@+ "%h " print
		cr allowchome ) drop ;


::infodic
	code> code - "$%h code " print cr
	;