|
| PHREDA 2014
|---------------------
^r4/lib/gui.txt


#x #y
#xs #ys

:convert | x y z -- x y
	rot 'x ! rot 'y !
	dup neg over over | z -z z -z |  D U R L
	0 dup 'xs ! 'ys !
	$80 ( 1? )( >r
		2dup + 2/ 		| D U R L m1
		x >? ( rot drop swap r neg 'xs +! )( nip r 'xs +! )
		2swap 2dup + 2/
		y >? ( rot drop swap r neg 'ys +! )( nip r 'ys +! )
		2swap r> 2/ ) drop
	4drop
	xs 2/ ys 2/
	;

:conver2 | x y z -- x y
	dup neg	rot | x z -z y
	pick2 pick2 | x z -z y z -z
	0 'xs ! 0 'ys !
	$10 ( 1? )( >r
		2dup + 2/
		pick2 >? ( rot drop swap r neg 'ys +! )( nip r 'ys +! )
		>r >r >r
		pick2 >? ( rot drop swap r neg 'xs +! )( nip r 'xs +! )

		r> 2/ ) 3drop
	4drop
	xs 2/ ys 2/
	;


:convert1 | x z -- x'
	dup neg | x R L
	0 rot rot | x xs R L bit
	$80 ( 1? )( >r
		2dup + 2/ 	| x xs R L m1
		pick4 >? ( rot drop swap rot r - )( nip rot r + )
		rot rot r> 2/ )
	3drop nip
	2/ ;

:c512 | x z -- x'
	2/ 0 swap 0 | x 0 z 0
	9 ( 1? )( 1- >r
		pick3 >? ( over - rot 2*  )( over + rot 2* 1+ )
		rot 2/ rot
		r> )
	3drop nip ;

:c512 | x z -- x'
	0 dup rot | x 0 0 z
	9 ( >r
		2/ rot
		pick3 >? ( over - rot 2* )( over + rot 2* 1+ )
		rot
		r> 1- 0? )
	2drop nip nip ;

|---- v3
:c512 | x z -- x'
	2/ 0 swap over | x 0 z 0
	256 ( >r
		pick3 >? ( over - rot )( over + rot r + )
		rot 2/ rot
		r> 2/ 0? )
	3drop nip ;

:drawpoint3	| x y z nodo
	>r swap over c512
	>r c512
	r> setxy
	r> 
	px!+ ;


|---- v4  loopless
:c9 | x z -- x'
	2/ 0 swap over | x 0 z 0
	pick3 >? ( over - rot )( over + rot 1+ ) 2* rot 2/ rot
	pick3 >? ( over - rot )( over + rot 1+ ) 2* rot 2/ rot
	pick3 >? ( over - rot )( over + rot 1+ ) 2* rot 2/ rot
	pick3 >? ( over - rot )( over + rot 1+ ) 2* rot 2/ rot
	pick3 >? ( over - rot )( over + rot 1+ ) 2* rot 2/ rot
	pick3 >? ( over - rot )( over + rot 1+ ) 2* rot 2/ rot
	pick3 >? ( over - rot )( over + rot 1+ ) 2* rot 2/ rot
	pick3 >? ( over - rot )( over + rot 1+ ) 2* rot 2/ rot
	pick3 >? ( over - rot )( over + rot 1+ )
	nip nip nip ;

|--------------ASM
|	mov edi,[esi]
|	mov ecx,eax
|	xor eax,eax
|	xor edx,edx
|	mov ebx,9
|_loop:
| 	sar ecx,1
|	sal eax,1
|	cmp edx,edi
|	jl _a1
|	sub edx,ecx
|	jmp _b1
|_a1:
|	add edx,ecx
|	or eax,1
|_b1:
|   sub ebx,1
|	jnz _loop
|	lea esi,[esi+4]
|	ret
|--------------ASM

:c9 | x z -- x'
	2/ 0 swap over | x 0 z 0
	pick3 >? ( over - rot )( over + rot 256 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 128 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 64 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 32 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 16 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 8 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 4 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 2 + ) rot 2/ rot
	pick3 >? ( over - rot )( over + rot 1+ )
	nip nip nip ;

:drawpoint	| x y z nodo
	>r swap over c9 >r c9 r> setxy
	r> px!+ ;


|---- v5 morton
:cmorton | x y z -- m
	2/ 0 dup dup >r | x y z 0 0
	pick4 >? ( pick2 - )( pick2 + $20000 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $10000 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $8000 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $4000 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $2000 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $1000 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $800 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $400 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $200 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $100 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $80 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $40 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $20 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $10 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $8 r+ ) swap
	pick3 >? ( pick2 - )( pick2 + $4 r+ ) swap rot 2/ rot rot
	pick4 >? ( pick2 - )( pick2 + $2 r+ ) swap
	pick3 <=? ( $1 r+ )
	nip 4drop r> ;


:main
	33
	show clrscr
		dup "%d " print cr

		100 20 90 convert
		"%d %d " print cr

		'exit >esc<
		;

: main ;

