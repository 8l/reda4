| traverse test
| PHREDA 2014
|-----------------------------
^r4/lib/gui.txt
^r4/lib/trace.txt
^r4/lib/morton.txt

#:qsize 15
#:deepvox 4

^r4/3d/wirelib.txt

|------ vista
#xcam 0 #ycam 0 #zcam 3.0

#tx0 5	#tx1  0
#ty0 6   #ty1  0
#tz0 7	#tz1   0

#ox #oy #oz

|---------- bresenham
#:cx #:cy #:cz	| actual
#ox #oy #oz	| origen
#dx #dy #dz	| direccion
#ex #ey #ez
#sx #sy #sz

#paso

|------------ funciona
:stepx1 | ey ez --
	dz - abs swap dy - abs
	<? ( drop sy 'cy +! ey dx 2* - 'ey ! ; )
	drop sz 'cz +! ez dx 2* - 'ez ! ;

:pasox1
	ey dy >? ( ez dz >? ( stepx1 ; ) drop sy 'cy +! dx 2* - 'ey ! ; ) dy 2* + 'ey !
	ez dz >? ( sz 'cz +! dx 2* - 'ez ! ; ) dz 2* + 'ez !
 	sx 'cx +! ;

:stepy1 | ex ez --
	dz - abs swap dx - abs
	<? ( drop sx 'cx +! ex dy 2* - 'ex ! ; )
	drop sz 'cz +! ez dy 2* - 'ez ! ;

:pasoy1
	ex dx >? ( ez dz >? ( stepy1 ; ) drop sx 'cx +! dy 2* - 'ex ! ; ) dx 2* + 'ex !
	ez dz >? ( sz 'cz +! dy 2* - 'ez ! ; ) dz 2* + 'ez !
 	sy 'cy +! ;

:stepz1 | ex ey --
	-
|	0? ( drop ex dz 2* - 'ex ! ey dz 2* - 'ey ! sz 'cz +! ; )
	0 >? ( drop sx 'cx +! ex dz 2* - 'ex ! ; )
	drop sy 'cy +! ey dz 2* - 'ey ! ;

:pasoz1
	ex dx >? ( ey dy >? ( stepz1 ; ) drop sx 'cx +! dz 2* - 'ex ! ; ) dx 2* + 'ex !
	ey dy >? ( sy 'cy +! dz 2* - 'ey ! ; ) dy 2* + 'ey !
 	sz 'cz +! ;

::dumpstep
	ex ey ez dz - "z:%d y:%d x:%d " print ;
|------------

:pasox
	ey +? ( sy 'cy +! dx 2* - ) dy 2* + 'ey !
	ez +? ( sz 'cz +! dx 2* - ) dz 2* + 'ez !
	sx 'cx +! ;
:pasoy
	ex +? ( sx 'cx +! dy 2* - ) dx 2* + 'ex !
	ez +? ( sz 'cz +! dy 2* - ) dz 2* + 'ez !
	sy 'cy +! ;
:pasoz
	ey +? ( sy 'cy +! dz 2* - ) dy 2* + 'ey !
	ex +? ( sx 'cx +! dz 2* - ) dx 2* + 'ex !
	sz 'cz +! ;

::voxOp | xi yi zi --
	'oz ! 'oy ! 'ox ! ;

::voxLine | xf yf zf --
	rot ox over - sign 'sx ! abs 'dx ! 'cx !
	swap oy over - sign 'sy ! abs 'dy ! 'cy !
	oz over - sign 'sz ! abs 'dz ! 'cz !
	dx dy >=? (
		dz >=? ( drop
			dy 2* dx - 'ey ! dz 2* dx - 'ez ! 'pasox 'paso ! ; )
		drop
		dx 2* dz - 'ex ! dy 2* dz - 'ey ! 'pasoz 'paso ! ; )
	drop
	dy dz >=? (
		drop
		dx 2* dy - 'ex ! dz 2* dy - 'ez ! 'pasoy 'paso ! ; )
	drop
	dx 2* dz - 'ex ! dy 2* dz - 'ey ! 'pasoz 'paso ! ;

::voxLinef | xf yf zf --
	rot ox over - sign 'sx ! abs 'dx ! 'cx !
	swap oy over - sign 'sy ! abs 'dy ! 'cy !
	oz over - sign 'sz ! abs 'dz ! 'cz !
	dx dy >=? (
		dz >=? ( drop
			dy 2* dx - 'ey ! dz 2* dx - 'ez ! 'pasox1 'paso ! ; )
		drop
		dx 2* dz - 'ex ! dy 2* dz - 'ey ! 'pasoz1 'paso ! ; )
	drop
	dy dz >=? (
		drop
		dx 2* dy - 'ex ! dz 2* dy - 'ez ! 'pasoy1 'paso ! ; )
	drop
	dx 2* dz - 'ex ! dy 2* dz - 'ey ! 'pasoz1 'paso ! ;

::voxPaso
	paso exec ;



:ready? | ; ultimo
	cx tx0 - cy ty0 - or cz tz0 - or ;

:inside? | ; adentro del bbox
	cx cy or cz or qsize not and ;

:tracetest
	tx0 ty0 tz0 voxOp
	tx1 ty1 tz1 voxLine
	( inside? 0? )( drop
		cx cy cz "%d %d %d  " print cr
		voxPaso
		ready? 0? ( drop cx cy cz "%d %d %d  " print cr ; ) drop
		) drop ;

:tracetest2
	tx0 ty0 tz0 voxOp
	tx1 ty1 tz1 voxLinef
	( inside? 0? )( drop
		cx cy cz
|		trace
		"%d %d %d  " print dumpstep
		cr
		voxPaso
		ready? 0? ( drop cx cy cz "%d %d %d  " print cr ; ) drop
		) drop ;



#:cx #:cy #:cz	| actual
#ox #oy #oz	| origen
#dx #dy #dz	| direccion
#ex #ey #ez
#sx #sy #sz
#n

:ddapaso
	dx 'ex +!
	dy 'ey +!
	dz 'ez +!

	ex ey >=? ( ez >=? ( 2* n >=? ( sx 'cx +! n neg 'ex +! ) drop ; ) ) drop
	ey ez >=? ( 2* n >=? ( sy 'cy +! n neg 'ey +! ) drop ; ) drop
|	ex 2* n >=? ( sx 'cx +! n neg 'ex +! ) drop
|	ey 2* n >=? ( sy 'cy +! n neg 'ey +! ) drop
	ez 2* n >=? ( sz 'cz +! n neg 'ez +! ) drop

	;

:dda3
	0 'ex ! 0 'ey ! 0 'ez !
	'oz ! 'oy ! 'ox !
	oz over - sign 'sz ! abs 'dz ! 'cz !
	oy over - sign 'sy ! abs 'dy ! 'cy !
	ox over - sign 'sx ! abs 'dx ! 'cx !
	dx dy max dz max 'n !

	( cx ox - cy oy - or cz oz - or 1? )( drop
		cx cy cz trace "%d %d %d " print cr
		ddapaso
	) drop
	;

:tracetest3
	tz1 ty1 tx1
	tz0 ty0 tx0
	dda3
	;

:main
	4 show clrscr

		verde
		tz0 ty0 tx0 "%d %d %d --> " print
		tz1 ty1 tx1 "%d %d %d " print
		cr cr chome!
		tracetest
		chome
		tracetest2
		chome
		tracetest3

		'exit >esc<
		cminiflecha ;

: mark main ;
